{"version":3,"sources":["locale/index.js","AsyncComponent.js","serviceWorker.js","index.js"],"names":["locale","en","__webpack_require__","e","then","bind","data","console","log","default","fr","LOCALES","Boolean","window","location","hostname","match","importComponent","AsyncApp","_Component","AsyncComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderLocalized","asyncToGenerator","regenerator_default","a","mark","_callee","_queryString$parse","activeLocale","clientSide","sanitizedLocale","translations","C","wrap","_context","prev","next","queryString","parse","search","includes","warn","concat","sent","state","component","setState","App","react_default","createElement","assign","stop","addEventListener","inherits","createClass","key","value","_componentDidMount","_callee2","_ref2","_context2","apply","arguments","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAAeA,EAAA,CACbC,GAAI,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAA4CD,KAAK,SAAAE,GAEzD,OADAC,QAAQC,IAAI,YAAaF,GAClBA,EAAKG,WAEdC,GAAI,kBAAMR,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAA4CD,KAAK,SAAAE,GAEzD,OADAC,QAAQC,IAAI,YAAaF,GAClBA,EAAKG,YCHVE,EAAU,CAAC,KAAM,MCQHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IFAuCC,EEAjCC,GFAiCD,EEAP,kBAAMf,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WFAkB,SAAAc,GAEpD,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,gBAZmBN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KAYD,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAT,EAAAC,EAAAS,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAT,EAC6BU,IAAYC,MAAMjC,OAAOC,SAASiC,QAA/DX,EADAD,EACRnC,OAAsBqC,EADdF,EACcE,YAExBC,EAAkB3B,EAAQqC,SAASZ,GAAgBA,EAAc,QAC/CA,GACtB7B,QAAQ0C,KAAR,kBAAAC,OAA+Bd,EAA/B,gBAAAc,OAA0DvC,IAL5C+B,EAAAE,KAAA,EAOW5C,EAAOsC,KAPlB,OAOVC,EAPUG,EAAAS,KASVX,EAAIlB,EAAK8B,MAAMC,UACrB/B,EAAKgC,SAAS,CACZC,IAAKf,EAAIgB,EAAAxB,EAAAyB,cAACjB,EAADjB,OAAAmC,OAAA,CAAGtB,aAAcA,EAAcC,WAAyB,UAAbA,EAAsBE,aAAcA,GAAkBjB,EAAKD,QAAa,OAX9G,wBAAAqB,EAAAiB,SAAAzB,MAThBrB,OAAO+C,iBAAiB,cAAe,WACrCtC,EAAKO,oBAGPP,EAAK8B,MAAQ,CACXC,UAAW,MARI/B,EAFiC,OAAAC,OAAAsC,EAAA,EAAAtC,CAAAH,EAAAD,GAAAI,OAAAuC,EAAA,EAAAvC,CAAAH,EAAA,EAAA2C,IAAA,oBAAAC,MAAA,eAAAC,EAAA1C,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KAAA,SAAAiC,IAAA,IAAAC,EAAAd,EAAA,OAAAtB,EAAAC,EAAAS,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EA8Bb3B,IA9Ba,OAAAkD,EAAAC,EAAAjB,KA8BjCE,EA9BiCc,EA8B1C1D,QAERgB,KAAK6B,SAAS,CACZD,UAAWA,IAEb5B,KAAKI,kBAnC6C,wBAAAuC,EAAAT,SAAAO,EAAAzC,SAAA,yBAAAwC,EAAAI,MAAA5C,KAAA6C,YAAA,KAAAP,IAAA,SAAAC,MAAA,WAuClD,OACER,EAAAxB,EAAAyB,cAAA,WACGhC,KAAK2B,MAAMG,SAzCkCnC,EAAA,CACzBmD,cEC/BC,IAASC,OAAOjB,EAAAxB,EAAAyB,cAACvC,EAAD,MAAcwD,SAASC,eAAe,SDyHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1E,KAAK,SAAA2E,GACjCA,EAAaC","file":"static/js/main.520e8532.chunk.js","sourcesContent":["export default {\n  en: () => import(/* webpackChunkName: \"en\" */ './en').then(data => {\n    console.log('loaded en', data);\n    return data.default;\n  }),\n  fr: () => import(/* webpackChunkName: \"fr\" */ './fr').then(data => {\n    console.log('loaded fr', data);\n    return data.default;\n  }),\n};\n","import React, { Component } from \"react\";\nimport queryString from 'query-string';\n\nimport locale from './locale';\nconst LOCALES = ['en', 'fr'];\n\nexport default function asyncComponent(importComponent) {\n  class AsyncComponent extends Component {\n    constructor(props) {\n      super(props);\n\n      window.addEventListener(\"routeChange\", () => {\n        this.renderLocalized();\n      });\n\n      this.state = {\n        component: null\n      };\n    }\n\n    renderLocalized = async() => {\n      const { locale: activeLocale, clientSide } = queryString.parse(window.location.search);\n\n      const sanitizedLocale = LOCALES.includes(activeLocale) ? activeLocale: 'fr';\n      if (sanitizedLocale !== activeLocale) {\n        console.warn(`invalid locale ${activeLocale} please try ${LOCALES}`);\n      }\n      const translations = await locale[sanitizedLocale]();\n\n      const C = this.state.component;\n      this.setState({\n        App: C ? <C activeLocale={activeLocale} clientSide={clientSide!=='false'} translations={translations} {...this.props } /> : null\n      });\n    }\n\n    async componentDidMount() {\n      const { default: component } = await importComponent();\n\n      this.setState({\n        component: component\n      });\n      this.renderLocalized();\n    }\n\n    render() {\n      return (\n        <div>\n          {this.state.App}\n        </div>\n      );\n    }\n  }\n\n  return AsyncComponent;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport AsyncComponent from './AsyncComponent';\nimport * as serviceWorker from './serviceWorker';\nconst AsyncApp = AsyncComponent(() => import(/* webpackChunkName: \"App\" */ './App'));\n\nReactDOM.render(<AsyncApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}